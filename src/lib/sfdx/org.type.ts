/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as OrgListValidator } from './schemas/org-list.schema.js'
import { validate as OrgValidator } from './schemas/org.schema.js'

export interface Org {
    orgId: string
    username: string
    instanceUrl: string
    accessToken: string
}

export const Org = {
    validate: OrgValidator as ValidateFunction<Org>,
    get schema() {
        return Org.validate.schema
    },
    get errors() {
        return Org.validate.errors ?? undefined
    },
    is: (o: unknown): o is Org => Org.validate(o) === true,
    parse: (o: unknown): { right: Org } | { left: DefinedError[] } => {
        if (Org.is(o)) {
            return { right: o }
        }
        return { left: (Org.errors ?? []) as DefinedError[] }
    },
} as const

export interface OrgList {
    result: Org[]
}

export const OrgList = {
    validate: OrgListValidator as ValidateFunction<OrgList>,
    get schema() {
        return OrgList.validate.schema
    },
    get errors() {
        return OrgList.validate.errors ?? undefined
    },
    is: (o: unknown): o is OrgList => OrgList.validate(o) === true,
    parse: (o: unknown): { right: OrgList } | { left: DefinedError[] } => {
        if (OrgList.is(o)) {
            return { right: o }
        }
        return { left: (OrgList.errors ?? []) as DefinedError[] }
    },
} as const
